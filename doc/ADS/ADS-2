===============================================================================
= ADS-2, rev: 0.2: Atrinik Protocol Specification                             =
===============================================================================
 This document contains design specification for the Atrinik client<->server
 protocol. The following sections exist:

 1. Session
    1.1 Packets
    1.2 Keepalive
 2. Server commands
    2.1  Server command CONTROL
    2.2  Server command ASK_FACE
    2.3  Server command SETUP
    2.4  Server command VERSION
    2.5  Server command CRYPTO
    2.6  Server command CLEAR
    2.7  Server command REQUEST_UPDATE
    2.8  Server command KEEPALIVE
    2.9  Server command ACCOUNT
    2.10 Server command ITEM_EXAMINE
    2.11 Server command ITEM_APPLY
    2.12 Server command ITEM_MOVE
    2.13 Server command REPLY
    2.14 Server command PLAYER_CMD
    2.15 Server command ITEM_LOCK
    2.16 Server command ITEM_MARK
    2.17 Server command FIRE
    2.18 Server command QUICKSLOT
    2.19 Server command QUESTLIST
    2.20 Server command MOVE_PATH
    2.21 Server command COMBAT
    2.22 Server command TALK
    2.23 Server command MOVE
    2.24 Server command TARGET
 3. Client commands
    3.1  Client command MAP
    3.2  Client command DRAWINFO
    3.3  Client command FILE_UPDATE
    3.4  Client command ITEM
    3.5  Client command SOUND
    3.6  Client command TARGET
    3.7  Client command ITEM_UPDATE
    3.8  Client command ITEM_DELETE
    3.9  Client command STATS
    3.10 Client command IMAGE
    3.11 Client command ANIM
    3.12 Client command SKILL_READY
    3.13 Client command PLAYER
    3.14 Client command MAPSTATS
    3.15 Client command SKILL_LIST
    3.16 Client command VERSION
    3.17 Client command SETUP
    3.18 Client command CONTROL
    3.19 Client command DATA
    3.20 Client command CHARACTERS
    3.21 Client command BOOK
    3.22 Client command PARTY
    3.23 Client command QUICKSLOT
    3.24 Client command COMPRESSED
    3.25 Client command REGION_MAP
    3.26 Client command SOUND_AMBIENT
    3.27 Client command INTERFACE
    3.28 Client command NOTIFICATION
 4. Example logic
 5. Authors

===============================================================================
= 1. Session                                                                  =
===============================================================================
 Atrinik uses a standard TCP/IP connection to establish a session. Once a
 session has been established, the client and the server are free to exchange
 data at will, in an asynchronous mode of data exchange. After this is done, it
 is MANDATORY that the server and the client exchange version information,
 with the use of the version command (see section 2.4 and section 3.16).
 This allows both sides to implement backward compatibility for older versions
 of the protocol.

 Both IPv4 and IPv6 sessions are supported, and must be implemented in order
 to be compliant with this document specification. Support for dual-stack
 systems is optional.

 The network order is MSB (Most Significant Byte), also known as big-endian.

 The default Atrinik port is 1728, however, it is recommended that server
 implementations allow this to be changed.

 The implementation SHOULD use non-blocking sockets to receive and send data.
 Using threads for this is highly recommended.

 The implementation SHOULD disable Nagle's algorithm, as this algorithm is
 enabled by default but introduces artificial lag due to buffering data until
 some amount of data has been buffered, then flushing the buffer. This
 behaviour has no place in a real-time action RPG such as Atrinik, where player
 should get feedback to their actions as quickly as possible. HOWEVER, it is
 recommended to enable Nagle's algorithm selectively for packets that do not
 need to be sent out immediately (such as chat, player statistics, etc).

 The server implementation MUST use some sort of buffers for data to send and
 receive, in order to allow for cancellation/compression/prioritisation/etc.
 The recommended approach is to use FIFO queues. The client is free to choose
 whether to implement such behaviour.

===============================================================================
= 1.1. Packets                                                                =
===============================================================================
 Data packets are constructed in MSB (Most Significant Byte) order, also known
 as big-endian.

 Each packet starts with a 2-byte header, which is an integer that contains
 information about the length of its payload. In the case of the client, this
 should always be sent to the server as unsigned (uint16).

 The server MUST implement the following additional behaviour for the header:
 in the case that the payload length is shorter than 0x8000, the length MUST
 be encoded as uint16. Otherwise, the length MUST be encoded as uint24, with
 0x800000 added. Thus, the client MUST implement behaviour to handle this (for
 example, if the first byte's bit 7 is 0, the header is uint16, otherwise it's
 uint24 minus 0x800000).

 The payload should always contain the command type as 8-bit integer, followed
 by any data, in any format whatsoever, but still binary. See section 2. for
 the available server commands organized by command type, and section 3. for
 the available client commands.

 Left shifting is done to convert any integers of size more than 1 byte. Signed
 integers are converted to signed data type.

 The following packet data types are recognised:
  - uint8
  - sint8
  - uint16
  - sint16
  - uint32
  - sint32
  - uint64
  - sint64
  - string:
     UTF-8 string, terminated by a NUL character.

===============================================================================
= 1.2. Keepalive                                                              =
===============================================================================
 Once a session has been established, the client MUST send keepalive (command
 explained in section 3.8) packets to the server, at an interval of no more
 than one packet per minute.

 If the server does not receive a keepalive packet from the client for a period
 longer than 10 minutes, it MUST, for all intents and purposes, consider the
 session as dead and drop the connection.

===============================================================================
= 2. Server commands                                                        =
===============================================================================
 The following is a list of commands recognised by the server.

 The commands listed below that do NOT require a player MUST be handled with
 priority: after reading them completely from the socket, they MUST be handled,
 and other commands MUST be added into a separate queue that will be handled
 at some other time (in a loop for each player, for example).

 These start at zero; thus, command type 0 equals that of the first command
 here.

 CONTROL:
  See section 2.1.
 ASK_FACE:
  See section 2.2.
 SETUP:
  See section 2.3.
 VERSION:
  See section 2.4.
 CRYPTO:
  See section 2.5.
 CLEAR:
  See section 2.6.
 REQUEST_UPDATE:
  See section 2.7.
 KEEPALIVE:
  See section 2.8.
 ACCOUNT:
  See section 2.9.
 ITEM_EXAMINE (player only):
  See section 2.10.
 ITEM_APPLY (player only):
  See section 2.11.
 ITEM_MOVE (player only):
  See section 2.12.
 REPLY (player only):
  See section 2.13.
 PLAYER_CMD (player only):
  See section 2.14.
 ITEM_LOCK (player only):
  See section 2.15.
 ITEM_MARK (player only):
  See section 2.16.
 FIRE (player only):
  See section 2.17.
 QUICKSLOT (player only):
  See section 2.18.
 QUESTLIST (player only):
  See section 2.19.
 MOVE_PATH (player only):
  See section 2.20.
 COMBAT (player only):
  See section 2.21.
 TALK (player only):
  See section 2.22.
 MOVE (player only):
  See section 2.23.
 TARGET (player only):
  See section 2.24.

===============================================================================
= 2.1. Server command CONTROL                                                 =
===============================================================================
 This command is used to control the server through remote means (no player
 login is necessary).

 The implementation SHOULD have some sort of security checks to enable only
 specific IPs to control the server (for example, 127.0.0.1 or user-configured
 list of IPs). However, security measures for this are beyond the scope of this
 document, and are implementation-specific.

 The packet MUST be constructed as thus, in the listed order:
  - app_name (string):
     The application name (optionally version as well) that is requesting to
     control the server. This SHOULD only be used for informational purposes in
     things such as server logs, and not as a means of denying specific actions
     depending on the application's name. MUST not be empty.
  - type (uint8):
     Type of the control command. This defines what kind of control packet this
     is (whether it concerns a map, or a player, for example).
  - subtype (uint8):
     Sub-type of the control command; for example, teleporting a player, or
     resetting a map.

 The following is a list of possible control command types, starting at an
 index of one.

 MAP:
  This command is used to control maps loaded by the server. The value of
  subtype defines what to do with the map file.

  The packet is extended with the following data, in the listed order:
   - mappath (string):
      Absolute path to the map file, relative to the "maps" directory; for
      example, "/shattered_islands/world_0115", or "/hall_of_dms". If empty, or
      the map file has not been loaded before, the implementation MUST ignore
      the command and discard the rest of any data it may have received
      associated with this command.

  The following is a list of possible sub-types for this command type, starting
  at an index of one.

  RESET:
   Used to request the reset of the specified map (due to for example, an
   update to the map file by an external source).
 PLAYER:
  This command is used to control players that are currently logged in.

  The packet is extended with the following data, in the listed order:
   - playername (string):
      Player name to control; can be empty.

  If the received player name is empty, a player MUST be chosen by the
  implementation; for example, the first player, or the first player who's a
  server operator, or a user-configured player name. It is possible that no
  player will be chosen (if no player that meets the criteria is logged in, for
  example). This behaviour is however also implementation-specific.

  If no suitable player has been found, the implementation MUST ignore the
  command and discard the rest of any data it may have received associated with
  this command.

  If a player has been successfully found (logged in), the entire packet
  payload MUST be forwarded to the player's client as client command CONTROL
  (see section 3.18).

  The following is a list of possible sub-types for this command type, starting
  at an index of one.

  TELEPORT:
   This command is used to teleport the previously specified player to the
   specified map, at the specified X/Y coordinates.

   The packet is extended with the following data, in the listed order:
    - mappath (string):
       Absolute path to the map file, relative to the "maps" directory; for
       example, "/shattered_islands/world_0115", or "/hall_of_dms".
    - x (sint16):
       X coordinate.
    - y (sint16):
       Y coordinate.

===============================================================================
= 2.2. Server command ASK_FACE                                                =
===============================================================================
 This command is used to ask the server for particular image data. The client
 SHOULD use this when it attempts to display an image that it a) doesn't have
 or b) the checksum is different than what was reported in the server file (it
 was updated on the server-side).

 The packet MUST be constructed as thus, in the listed order:
  - facenum (uint16):
     ID of the image to get image data of.

 If the ID of the image is higher than zero and lower than the number of
 available images, and there *is* data for that particular image, the server
 SHOULD send the image's data to the client as a response, using the client
 command IMAGE (see section 3.10.).

===============================================================================
= 2.3. Server command SETUP                                                   =
===============================================================================
 This command is used to exchange information about supported capabilities,
 features, etc between the server and the client after having established a
 connection, and, ideally, after exchanging version information (see sections
 2.4. and 3.16.).

 As the packet data is being parsed by the server, a cloned packet MUST be
 constructed at the same or later time, as a response for the client. This new
 packet MUST have the same data format as what was received, but can have
 different values: in essence, values that were accepted and *really*
 configured by the server. What options get accepted are up to the server's
 implementation, but the proper response MUST be sent to the client as client
 command SETUP (see section 3.17.).

 The packet MUST be constructed as thus, in the listed order, repeating any
 number of times (for different setup options):
  - type (uint8):
     Type of the setup option. Defines what kind of an option this is.

 The following is a list of possible types, starting at an index of zero.

 SOUND:
  Whether to enable/disable sound.

  The packet is extended with the following data, in the listed order:
   - value (uint8):
      Zero to disable sound effects and music packets being sent to the
      client, non-zero to enable them.
 MAPSIZE:
  Configuration for the map's size.

  The packet is extended with the following data, in the listed order:
   - width (uint8):
      Width of the map.
   - height (uint8):
      Height of the map.
 BOT:
  Whether to enable/disable bot flag.

  The packet is extended with the following data, in the listed order:
   - value (uint8):
      Zero to disable bot flag, non-zero to enable it.
 DATA_URL:
  Which URL to use for data files (such as server files). The client CAN
  suggest an URL to the server, and it is up to the server's implementation
  whether to even consider the client's URL, or discard it altogether, or
  approve its use. In either case, the server MUST respond with a valid URL
  for the client to use.

  The packet is extended with the following data, in the listed order:
   - url (string):
      The URL to use for data files. Empty string to simply ask for the URL,
      otherwise a valid URL as a suggestion.

===============================================================================
= 2.4. Server command VERSION                                                 =
===============================================================================
 This command is used to inform the server about the client's version. Upon
 receiving the version, the server is free to drop the connection depending on
 the received version number, if it determines that the version is unsupported,
 for example.

 The packet MUST be constructed as thus, in the listed order:
  - version (uint32):
     The version number. Must be higher than zero, otherwise the server MUST
     drop connection.

 Additionally, only one version packet is allowed per session. Any data in
 version commands that are handled after the first MUST be discarded.

 After successfully storing the version number (establishing that is valid and
 compatible), the server MUST respond with its own version number, sending
 client command VERSION (see section 3.16.) to the client.

===============================================================================
= 2.5. Server command CRYPTO                                                  =
===============================================================================
 This command is used to establish a secure cryptographic session.

 See ADS-6 for details about how this command works.

 This command MUST not be sent over the classic non-crypto port that was
 described in the beginning of this document.

===============================================================================
= 2.6. Server command CLEAR                                                   =
===============================================================================
 This command is used to clear the player packet commands queue. Thus, any
 previously read player packet commands that haven't been handled yet will be
 completely cleared.

===============================================================================
= 2.7. Server command REQUEST_UPDATE                                          =
===============================================================================
 This command is used to request an update of the specified file under the
 client's directory, whatever it may be.

 The packet MUST be constructed as thus, in the listed order:
  - filename (string):
     Path of the file to request an update for, relative to the client's
     directory (for example, sound/effects/arrow.ogg, or textures/intro.png).

 If the filename is valid (the server knows about this file), the server MUST
 send client command FILE_UPDATE (see section 3.3.) with the file's contents
 as a response.

===============================================================================
= 2.8. Server command KEEPALIVE                                               =
===============================================================================
 This command is used to inform the server that the connection is still alive.

 An optional keepalive ID MAY be supplied, in order to identify the keepalive.
 This ID will be sent as response to the client, using the client keepalive
 command (see section TODO). No response is sent if the ID was not supplied.

 The rest of this section does not apply if the packet is empty (ie, no
 keepalive ID was supplied).

 The packet MUST be constructed as thus, in the listed order:
  - ID (uint32):
     The keepalive ID.

===============================================================================
= 2.9. Server command ACCOUNT                                                 =
===============================================================================
 This command is used to perform account related operations, such as creating
 new account, logging into an account, logging into an account's character, and
 so on.

 The packet MUST be constructed as thus, in the listed order:
  - type (uint8):
     The type of the operation.

 The following is a list of possible types, starting at an index of one.

 LOGIN:
  Used to log in to the account.

  The packet is extended with the following data, in the listed order:
   - name (string):
      Account name to log in to.
   - password (string):
      Account password to log in with.
 REGISTER:
  Used to register a new account.

  The packet is extended with the following data, in the listed order:
   - name (string):
      Account name to register.
   - password (string):
      Account password to register with.
   - password2 (string):
      Verification of the provided password.
 LOGIN_CHAR:
  Used to log in to an account's character. May only be used once the
  session has successfully logged into some account.

  The packet is extended with the following data, in the listed order:
   - name (string):
      Character name to log in as.
 NEW_CHAR:
  Used to create a new character. May only be used once the session has
  successfully logged into some account.

  The packet is extended with the following data, in the listed order:
   - name (string):
      Character name to create.
   - archname (string):
      Archetype to use for the character (for example, half_elf_male,
      human_female, etc).
 PSWD:
  Used to change the account password. May only be used once the session
  has successfully logged into some account.
   - password (string):
      Current account password.
   - password_new (string):
      New password.
   - password_new2 (string):
      Verification of the new password.

===============================================================================
= 2.10. Server command ITEM_EXAMINE                                           =
===============================================================================
 Used to request examining of a specified item.

 The packet MUST be constructed as thus, in the listed order:
  - tag (uint32):
     UID of the item to examine. If zero, no item will be examined.

===============================================================================
= 2.11. Server command ITEM_APPLY                                             =
===============================================================================
 Used to request applying of a specified item.

 The packet MUST be constructed as thus, in the listed order:
  - tag (uint32):
     UID of the item to apply. If zero, no item will be applied.

===============================================================================
= 2.12. Server command ITEM_MOVE                                              =
===============================================================================
 Used to request moving any number of items from one inventory to another.

 The packet MUST be constructed as thus, in the listed order:
  - to (uint32):
     UID of the container that the item should be moved into.
  - tag (uint32):
     UID of the item to move.
  - nrof (uint32):
     How many items to move.

===============================================================================
= 2.13. Server command REPLY                                                  =
===============================================================================
 This is an obsolete command that is kept for backwards compatibility, but has
 no use and may be renamed in future versions of this document specification.

===============================================================================
= 2.14. Server command PLAYER_CMD                                             =
===============================================================================
 This command is used to run arbitrary game commands such as /chat, /ban, etc.

 The packet MUST be constructed as thus, in the listed order:
  - command (string):
     Command to execute, for example, "/chat hello world".

===============================================================================
= 2.15. Server command ITEM_LOCK                                              =
===============================================================================
 Used to request locking of a specified item.

 The packet MUST be constructed as thus, in the listed order:
  - tag (uint32):
     UID of the item to lock. If zero, no item will be locked.

===============================================================================
= 2.16. Server command ITEM_MARK                                              =
===============================================================================
 Used to request marking of a specified item.

 The packet MUST be constructed as thus, in the listed order:
  - tag (uint32):
     UID of the item to mark. If zero, no item will be marked.

===============================================================================
= 2.17. Server command FIRE                                                   =
===============================================================================
 Used to request firing a specified ranged weapon.

 The packet MUST be constructed as thus, in the listed order:
  - dir (uint8):
     Direction to fire into.
  - tag (uint32):
     UID of the ranged weapon to fire. If zero or same as player's currently
     applied ranged weapon's UID, the currently applied ranged weapon MUST be
     fired. Otherwise, a spell or skill object that matches the UID MUST be
     fired.

===============================================================================
= 2.18. Server command QUICKSLOT                                              =
===============================================================================
 Used to request setting a specified quickslot to a particular item, or
 removing quickslot.

 The packet MUST be constructed as thus, in the listed order:
  - quickslot (uint8):
     Quickslot ID to work on. MUST be greater than or equal to 1, and MUST be
     less than or equal to 32.
  - tag (uint32):
     UID of the item to set as quickslot (removing any previous item from the
     quickslot). If zero, remove any previous item from the quickslot.

===============================================================================
= 2.19. Server command QUESTLIST                                              =
===============================================================================
 This command is used to request displaying of the player's quest list.

===============================================================================
= 2.20. Server command MOVE_PATH                                              =
===============================================================================
 This command is used to make the player intelligently walk to the specified
 coordinates. This is done through path computation.

 The packet MUST be constructed as thus, in the listed order:
  - x (uint8):
     X coordinate.
  - y (uint8):
     Y coordinate.

 Note that the coordinates are uint8 and not uint16 on purpose; they do not
 define a specific point on the map the player is located on, but a specific
 point on the map that is visible to the player. Thus, coordinates of 0,0 would
 mean the topmost (northwest) corner of the map that is visible to the player.
 Further calculations are necessary to resolve that to the actual map
 coordinates.

===============================================================================
= 2.21. Server command COMBAT                                                 =
===============================================================================
 This command is used to switch between combat modes.

 The packet MUST be constructed as thus, in the listed order:
  - combat (uint8):
     Combat flag; 1 to swing at targeted enemies, 0 to hold attack.
  - combat_force (uint8):
     Combat force flag; if 1, friendlies will be treated as enemies.

===============================================================================
= 2.22. Server command TALK                                                   =
===============================================================================
 This command is used to talk to a specific object, for example, an NPC.

 The packet MUST be constructed as thus, in the listed order:
  - type (uint8):
     Type of the talk command.

 The following is a list of possible types, starting at an index of one.

 NPC:
  Talk to a nearby NPC.

  The packet is extended with the following data, in the listed order:
   - message (string):
      Message that will be spoken to the NPC. MUST not be empty.
 NPC_NAME:
  Talk to an NPC with the specified name.

  The packet is extended with the following data, in the listed order:
   - npc_name (string):
      Name of the NPC to talk to. MUST not be empty.
   - message (string):
      Message that will be spoken to the NPC. MUST not be empty.
 INV:
  Talk to an object inside the player's inventory.

  The packet is extended with the following data, in the listed order:
   - tag (uint32_t):
      UID of the object to talk to.
   - message (string):
      Message that will be spoken to the object. MUST not be empty.
 BELOW:
  Talk to an object below the player's feet.

  The packet is extended with the following data, in the listed order:
   - tag (uint32_t):
      UID of the object to talk to.
   - message (string):
      Message that will be spoken to the object. MUST not be empty.
 CONTAINER:
  Talk to an object inside the currently open container.

  The packet is extended with the following data, in the listed order:
   - tag (uint32_t):
      UID of the object to talk to.
   - message (string):
      Message that will be spoken to the object. MUST not be empty.
 CLOSE:
  Stop talking to an NPC/object.

===============================================================================
= 2.23. Server command MOVE                                                   =
===============================================================================
 This command is used to move in a particular direction.

 The packet MUST be constructed as thus, in the listed order:
  - dir (uint8):
     Atrinik direction to move to.
  - run_on (uint8):
     If 1, enable running mode.

===============================================================================
= 2.24. Server command TARGET                                             =
===============================================================================
 This command is used to target a specifi monster/NPC/etc.

 The packet MUST be constructed as thus, in the listed order:
  - type (uint8):
     Type of the target command.

 The following is a list of possible types, starting at an index of one.

 MAPXY:
  Targets a monster/NPC on the specified square. Just like the move path
  command, the coordinates are relative to the player's visible screen
  and need to be resolved to real in-game coordinates.

  The packet is extended with the following data, in the listed order:
   - x (uint8):
      X coordinate.
   - y (uint8):
      Y coordinate.
   - count (uint32):
      UID of the monster/NPC to target. Can be zero to target the first valid
      monster/NPC on the square.
 CLEAR:
  Clears the player's target.

===============================================================================
= 3. Client commands                                                          =
===============================================================================
 The following is a list of commands recognised by the client.

 These start at zero; thus, command type 0 equals that of the first command
 here.

 MAP:
  See section 3.1.
 DRAWINFO:
  See section 3.2.
 FILE_UPDATE:
  See section 3.3.
 ITEM:
  See section 3.4.
 SOUND:
  See section 3.5.
 TARGET:
  See section 3.6.
 ITEM_UPDATE:
  See section 3.7.
 ITEM_DELETE:
  See section 3.8.
 STATS:
  See section 3.9.
 IMAGE:
  See section 3.10.
 ANIM:
  See section 3.11.
 SKILL_READY:
  See section 3.12.
 PLAYER:
  See section 3.13.
 MAPSTATS:
  See section 3.14.
 SKILL_LIST:
  See section 3.15.
 VERSION:
  See section 3.16.
 SETUP:
  See section 3.17.
 CONTROL:
  See section 3.18.
 DATA:
  See section 3.19.
 CHARACTERS:
  See section 3.20.
 BOOK:
  See section 3.21.
 PARTY:
  See section 3.22.
 QUICKSLOT:
  See section 3.23.
 COMPRESSED:
  See section 3.24.
 REGION_MAP:
  See section 3.25.
 SOUND_AMBIENT:
  See section 3.26.
 INTERFACE:
  See section 3.27.
 NOTIFICATION:
  See section 3.28.

===============================================================================
= 5. Authors                                                                  =
===============================================================================
 This document was written by:

  Alex Tokar
  Andreas Kirschbaum
